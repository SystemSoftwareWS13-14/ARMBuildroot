#!/bin/bash
# Helper script for the arm linux kernel and quemu.
# To compile the kernel buildroot is used.

# Configure this script here:
DEFAULT_CMD=emulate
ROOT_DIR="buildroot-2013.08.1"
IMG_PATH="output/images/zImage"
ROOTFS_PATH="output/images/rootfs.cpio.bz2"
BOARD="versatilepb"

cd $ROOT_DIR

compile()
{
        make
}

emulate()
{
        QEMU_AUDIO_DRV=none qemu-system-arm -kernel $IMG_PATH \
        -M $BOARD -nographic \
	-initrd $ROOTFS_PATH \
	-append "console=ttyAMA0"

        # -nographic: Redirect output (inclusive serial) to command line
        # -serial: Redirect serial port (standard is stdio)
        # -append "rdinit=/bin/sh" to start shell from initramfs (not /init)
}

# UNUSED
emulateIMG()
{
        exit;

        IMGPATH="arch/arm/boot/zImage"
        ROOTFSPATH="../busybox-1.21.1/rootfs.cpio"
        QEMU_AUDIO_DRV=none qemu-system-arm -kernel $IMG_PATH \
        -M vexpress-a9 \
        -nographic \
        -initrd $ROOTFSPATH \
        -append "rdinit=/sbin/init console=ttyAMA0" \
        -net nic,macaddr=00:00:00:00:00:1B,vlan=0 \
        -net vde,sock="/tmp/vde2-tap0.ctl",vlan=0
        #-net user,hostfwd=tcp:127.0.0.1:5555-:80
}

config()
{
        make menuconfig
}

kernelconfig()
{
	make linux-menuconfig
}

clean()
{
        make clean
}

defconfig()
{
        make qemu_arm_versatile_defconfig
}

download()
{
	make source
}

pack()
{
	cd ../application
	tar -czf show_uptime.tar.gz src
	cd ../$ROOT_DIR
}

usage()
{
        echo "Usage $0 [-c <command>]" 1>&2
        echo -e "-c:\t\tCommand to execute:" 1>&2
        echo -e "\t\tcompile, emulate, config, kernelconfig, clean, defconfig, download, pack" 1>&2
        echo -e "\t\t(Default is -c emulate)" 1>&2
        exit 1
}

if [ $# -eq 0 ]
then
        command=$DEFAULT_CMD
fi

while getopts ":c:h" opt; do
        case $opt in
                c)
                        command=$OPTARG
                        ;;
                h)
                        usage
                        ;;
                :)
                        echo "Option requires an argument."
                        usage
                        ;;
                ?)
                        echo "Invalid option."
                        usage
                        ;;
                *)
                        echo "Unimplemented option."
                        command=$DEFAULT_CMD
                        ;;
        esac
done
shift $(($OPTIND - 1))

if [ -z $command ]
then
        command=$DEFAULT_CMD
fi

echo "Running $command"

$command
